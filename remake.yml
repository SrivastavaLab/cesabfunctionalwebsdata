## a remake file to automate the process of assembling the dataset
## edited by Andrew in September 2016

## first, list all the packages required
packages:
  - dplyr
  - tidyr
  - purrr
  - bwgdata
  - stringr
  - assertr
  - lubridate
  - rmarkdown
  - knitr
  - ggplot2
  - broom
  - readr
  - modelr
  - ggmap
  - viridis
  - assertthat
  - lazyeval
  - prediction
  - visdat
  - fuzzyjoin
  - googlesheets

sources:
  #- Rfunctions
  - Rfunctions/01_accessing_cleaning.R
  - Rfunctions/02_detritus_subdividing_error_correction.R
  - Rfunctions/03_detritus_fpom_ml_to_g.R
  - Rfunctions/99_mapping_checking.R
  - Rfunctions/find_symbols.R
  - Rfunctions/03_detritus_equations.R
  - Rfunctions/output_spp_dictionary.R
  - Rfunctions/22_detritus_combination.R
  - Rfunctions/07_traits_checking.R
  - Rfunctions/preparing_supp_data.R
  - Rfunctions/24_volume_imputation.R
  - Rfunctions/manipulate_abundances.R
  - Rfunctions/openness.R
  - Rfunctions/adding_elevation.R
  - Rfunctions/11_MDtrait_Function.R
  - Rfunctions/RELEASE.R
  - Rfunctions/correct_bromeliad_species.R
  - Rfunctions/traitmerge.R

targets:
  downloads:
    depends:
      - dats
      - visits
      - broms
      - trts_all
      - abds
      - trait_spreadsheet

  outputs:
    depends:
      - outputs/bromeliad_observations.csv
      - outputs/dataset_information.csv
      - outputs/visit_information.csv
      - outputs/detritus.csv
      - outputs/fpom_fg_data.csv
      - outputs/spp_dictionary.csv
      - outputs/detritus_models.rds
      - outputs/detritus_plots.rds

  all:
    depends:
      - detritus_model_plots
      - bromeliad_correctnames
      - traits
      - spp_abundances_wide
      - supp_size_model_fits

  ## obtain all the data

  dats:
    command: bwg_get(I("datasets"))

  visits:
    command: bwg_get(I("visits"))

  broms:
    command: bwg_get(I("bromeliads"))


## get every single abundance table (sensible datasets only)
  abds:
    command: get_all_abundances(dats)

## specify trait arguments
  getargs:
    command: list(tachet = I("true"), traits = I("true"))

  trts_all:
    command: bwg_get(I("species"), getargs)

  trait_spreadsheet:
    command: get_trait_spreadsheet()

## restructuring datasets

  broms_rename_unnest:
    command: no_attrib_unnest_det(broms)

  trts_all_filtered:
    command: combine_multi_names(trts_all)

  taxonomy_cols:
    command: make_taxonomy_cols(trts_all_filtered)

  lowest_taxonomic:
    command: get_lowest_taxonomic(taxonomy_cols)

  pres_abds:
    command: discard(abds, I(is.na))

  abundance:
    command: tidy_dataset_list(pres_abds)
    ## function is from bwgdata

### load in supplementary data

  fpom_fg_data:
    command: read_fpom_fg("data-raw/FPOMdecanted_dryweight.csv")


## coercing values if necessary

  visits_date:
    command: parse_column_types_reader(visits)

  dats_date:
    command: parse_column_types_reader(dats)

  ## drop a bad column name
  brom_clean_name:
    command: drop_bad_name(broms_rename_unnest)

  broms_date:
    command: parse_column_types_reader(brom_clean_name)

## summarizing datasets

  visitnames:
    command: make_visitnames(visits_date, dats_date)
    ## dats_date is here to work in a semi-join.

  datasetnames:
    command: make_datasetnames(visitnames)

  diam_brom:
    command: make_diam_brom(broms_date)

  fpom_brom:
    command: make_fpom_brom(broms_date)

  detritus_wide:
    command: make_detritus_wide(broms_date)

  detritus_wider:
    command: make_detritus_wider(broms_date, detritus_wide, visitnames, diam_brom, fpom_brom)

# import corrected bromeliad names --------------------------------------------------

  bromeliad_names:
    command: import_BromeliadSpecies("data-intermediate/bromeliad_names.csv")

  detritus_wider_bromeliad_names:
    command: fix_whitespace_bromeliad_names(detritus_wider)

  ## correcting erroneous measurements in Cardoso -- moving some values to the right

  detritus_wider_cardoso_corrected:
    command: correct_cardoso_detritus_wider(detritus_wider_bromeliad_names)

  ## correcting erroneous measurements in french Guiana -- mislabelled columns
  detritus_wider_correct_frenchguiana:
    command: correct_frenchguiana_detritus(detritus_wider_cardoso_corrected)

  detritus_wider_correct_brazil:
    command: correct_picin_juraea(detritus_wider_correct_frenchguiana)

  # inferring FPOM mass from FPOM volume

  ## First step: create model

  model_fpom_g_ml:
    command: fit_fpom_g_ml(fpom_fg_data)

  ## then use both model and data to create the new predictions
  detritus_wider_fpom_g_pred:
    command: add_predictions_to_data(detritus_wider_correct_brazil, model_fpom_g_ml)

  ## combine the observed and predicted values (keep se column)
  detritus_wider_0_150_added:
    command: combine_observed_predicted_0_150_det(detritus_wider_fpom_g_pred)

  detritus_wider_150_name_changed:
    command: change_name_150_combo(detritus_wider_0_150_added)


# Export corrected bromeliad names --------------------------------------------------

  outputs/bromeliad_observations.csv:
    command: write_csv(detritus_wider_150_name_changed, path = target_name)

  outputs/dataset_information.csv:
    command: write_csv(dats_date, path = target_name)

  outputs/visit_information.csv:
    command: write_csv(visits_date, path = target_name)

  outputs/detritus.csv:
    command: write_csv(detritus_wider_new_variables, path = target_name)

  outputs/fpom_fg_data.csv:
    command: write_csv(fpom_fg_data, path = target_name)

  spp_dictonary:
    command: output_spp_dictionary(abundance, broms_date, visits_date, trts_all_filtered)

  outputs/spp_dictionary.csv:
    command: write_csv(spp_dictonary, path = target_name)

  outputs/detritus_models.rds:
    command: write_rds(detritus_estimated_with_model, path = target_name)

  outputs/detritus_plots.rds:
    command: write_rds(detritus_model_plots, path = target_name)


# estimating missing detritus with equations ----------------------------------

  equation_table:
    command: create_equation_table()

  detritus_equation_plots:
    command: plot_data_with_equation_table(equation_table, .detritus_data = detritus_wider_150_name_changed)

  detritus_estimate_equation_filt:
    command: do_filter_dataset_id(equation_table, .detritus_data = detritus_wider_150_name_changed)

  detritus_estimated_with_equation:
    command: do_mutate_new_col(detritus_estimate_equation_filt)

# estimating missing detritus with MODELS --------------------------------------

  detritus_wider_new_variables:
    command: add_new_columns_for_prediction(detritus_wider_150_name_changed)

  model_table:
    command: create_model_table()

  modelling_information:
    command: derive_modelling_information(model_table, detritus_wider_new_variables)

  observed_model_fit:
    command: do_fit_predictive_model(modelling_information)

  plotting_information:
    command: construct_plotting_information(.observed_model_fit = observed_model_fit,
                                            .modelling_information = modelling_information)

  detritus_model_plots:
    command: plot_model_and_supporting_data(.plotting_information = plotting_information,
                                            .modelling_information = modelling_information)

  detritus_estimated_with_model:
    command: estimate_missing_detritus_new_site(.observed_model_fit = observed_model_fit,
                                                .modelling_information = modelling_information,
                                                .detritus_data = detritus_wider_new_variables)


## add that data together ----------------------------------------------------------------


  detritus_all_preds:
    command: combine_detritus_predictions(detritus_estimated_with_model)

  detritus_long_categories:
    command: combine_all_detritus_values(detritus_wider_new_variables, detritus_all_preds, broms_date)

  detritus_long_filtered:
    command: filter_just_orig_fitted(detritus_wider_150_name_changed, detritus_long_categories)

  det_long_broken_up:
    command: split_detritus_categories(detritus_long_filtered)

  det_long_min_max:
    command: extract_numeric_min_max(det_long_broken_up)

  det_long_check_consec:
    command: add_consecutive_detritus_col(det_long_min_max)

  detritus_summary:
    command: create_detritus_summary(det_long_check_consec)

  bromeliad_detritus:
    command: add_detritus_summary(detritus_wider_150_name_changed, detritus_summary)

# Traits -------------------------------------------------------------------------------------

  traits:
    command: merge_trait_by_taxonomy(trait_spreadsheet, lowest_taxonomic)


# Volume equations -------------------------------------------------------------------------------------

  aquilega_biog:
    command: read_size_aquilega("data-intermediate/size_aquilega_Biog.csv")

  aquilegaKT:
    command: read_size_aquilega("data-intermediate/size_aquilegaKT.csv")

  guzmania:
    command: read_size_Guzmania_mertensii("data-intermediate/size_Guzmania_PR.csv")

  mertensii:
    command: read_size_Guzmania_mertensii("data-intermediate/size_mertensii.csv")

  vriesea:
    command: read_size_vriesea("data-intermediate/size_vriesea.csv")

  vriesea_prod:
    command: read_size_vriesea("data-intermediate/size_vriesea_prod.csv")

  supplementary_size_data:
    command: >
      bind_rows(aquilega_biog = aquilega_biog, aquilegaKT = aquilegaKT,
      guzmania = guzmania, mertensii = mertensii, vriesea = vriesea, vriesea_prod = vriesea_prod, .id = I("filename"))

  supp_data_additional:
    command: add_more_info_to_supp(supplementary_size_data)

  supp_data_renamed:
    command: supp_data_rename(supp_data_additional)

  supp_size_models:
    command: make_model_data()

  supp_size_model_info:
    command: derive_modelling_information_simpler(supp_size_models, supp_data_renamed)

  supp_size_model_data:
    command: make_model_target_data()

  supp_size_model_fits:
    command: fit_size_models_to_data(supp_size_model_info, supp_size_model_data)

# creating the "openness" response variable -----------------------------------------------------

  bromeliad_detritus_extra_cols:
    command: add_in_extra_columns(detritus_wide, detritus_wider, bromeliad_detritus)

  bromeliad_detritus_incidentrad:
    command: correct_incident_rad_percent(bromeliad_detritus_extra_cols)

  openness_conversion_table:
    command: create_openness_conversion_table()

  bromeliad_detritus_open:
    command: left_join(bromeliad_detritus_incidentrad, openness_conversion_table)

  bromeliad_detritus_open_converted:
    command: convert_incident_to_openness(bromeliad_detritus_open)

# Elevation  ------------------------------------


  bromeliad_elevation:
    command: add_elevation(bromeliad_detritus_open_converted)

# Correct brom names --------------------------------------------

  genus_spp_corrected:
    command: extract_bromeliad_species_names(bromeliad_elevation)

  correct_name_pairing:
    command: join_old_new_bromeliad_names(genus_spp_corrected, bromeliad_names)

  bromeliad_correctnames:
    command: correct_bromelaid_species_names(bromeliad_elevation, correct_name_pairing)

# Abundances -----------------------------------------------------

  summed_abundance_spp:
    command: sum_species_abundances(abundance)

  summed_abundance_lasgamas_dyst_correct:
    command: correct_lasgamas_dytiscid(summed_abundance_spp)


  spp_abundances_wide:
    command: spread_present_species(summed_abundance_lasgamas_dyst_correct)


#  maxvol_model.md:
#    knitr:
#      auto_figure_prefix: true
#    depends:
#      - aquilega_biog
#      - aquilegaKT
#      - guzmania
#      - mertensii
#      - vriesea
#      - vriesea_prod

#  seeking_volume_equations.md:
#    knitr:
#      auto_figure_prefix: true
#    depends:
#      - bromeliad_detritus
#      - dats_date
#      - supp_data_additional


# RELEASE

  RELEASE/all_data.rds:
    command: >
      create_data_release(target_name,
      datasets = dats_date,
      visits = visits_date,
      traits = traits,
      bromeliads = bromeliad_correctnames,
      abundance = summed_abundance_lasgamas_dyst_correct,
      abundance_matrix = spp_abundances_wide)
